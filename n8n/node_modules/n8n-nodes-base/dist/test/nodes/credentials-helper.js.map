{"version":3,"sources":["../../../test/nodes/credentials-helper.ts"],"sourcesContent":["import { Container, Service } from '@n8n/di';\nimport { Credentials } from 'n8n-core';\nimport { ICredentialsHelper } from 'n8n-workflow';\nimport type {\n\tICredentialDataDecryptedObject,\n\tIDataObject,\n\tIHttpRequestHelper,\n\tIHttpRequestOptions,\n\tINode,\n\tINodeCredentialsDetails,\n\tIWorkflowExecuteAdditionalData,\n} from 'n8n-workflow';\n\nimport { CredentialTypes } from './credential-types';\nimport { FAKE_CREDENTIALS_DATA } from './FakeCredentialsMap';\n\n@Service()\nexport class CredentialsHelper extends ICredentialsHelper {\n\tgetCredentialsProperties() {\n\t\treturn [];\n\t}\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\ttypeName: string,\n\t\trequestParams: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\tconst credentialType = Container.get(CredentialTypes).getByName(typeName);\n\t\tif (typeof credentialType.authenticate === 'function') {\n\t\t\treturn await credentialType.authenticate(credentials, requestParams);\n\t\t}\n\t\treturn requestParams;\n\t}\n\n\tasync preAuthentication(\n\t\t_helpers: IHttpRequestHelper,\n\t\t_credentials: ICredentialDataDecryptedObject,\n\t\t_typeName: string,\n\t\t_node: INode,\n\t\t_credentialsExpired: boolean,\n\t): Promise<ICredentialDataDecryptedObject | undefined> {\n\t\treturn undefined;\n\t}\n\n\tgetParentTypes(_name: string): string[] {\n\t\treturn [];\n\t}\n\n\tasync getDecrypted(\n\t\t_additionalData: IWorkflowExecuteAdditionalData,\n\t\tnodeCredentials: INodeCredentialsDetails,\n\t\ttype: string,\n\t): Promise<ICredentialDataDecryptedObject> {\n\t\treturn this.getFakeDecryptedCredentials(nodeCredentials, type);\n\t}\n\n\tasync getCredentials(\n\t\t_nodeCredentials: INodeCredentialsDetails,\n\t\t_type: string,\n\t): Promise<Credentials> {\n\t\treturn new Credentials({ id: null, name: '' }, '', '');\n\t}\n\n\tasync updateCredentials(\n\t\t_nodeCredentials: INodeCredentialsDetails,\n\t\t_type: string,\n\t\t_data: ICredentialDataDecryptedObject,\n\t): Promise<void> {}\n\n\tprivate getFakeDecryptedCredentials(nodeCredentials: INodeCredentialsDetails, type: string) {\n\t\tconst credentialsMap = FAKE_CREDENTIALS_DATA as IDataObject;\n\t\tif (nodeCredentials && credentialsMap[JSON.stringify(nodeCredentials)]) {\n\t\t\treturn credentialsMap[JSON.stringify(nodeCredentials)] as ICredentialDataDecryptedObject;\n\t\t}\n\n\t\tif (type && credentialsMap[type]) {\n\t\t\treturn credentialsMap[type] as ICredentialDataDecryptedObject;\n\t\t}\n\n\t\treturn {};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAmC;AACnC,sBAA4B;AAC5B,0BAAmC;AAWnC,8BAAgC;AAChC,gCAAsC;AAG/B,IAAM,oBAAN,cAAgC,uCAAmB;AAAA,EACzD,2BAA2B;AAC1B,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,aACL,aACA,UACA,eAC+B;AAC/B,UAAM,iBAAiB,oBAAU,IAAI,uCAAe,EAAE,UAAU,QAAQ;AACxE,QAAI,OAAO,eAAe,iBAAiB,YAAY;AACtD,aAAO,MAAM,eAAe,aAAa,aAAa,aAAa;AAAA,IACpE;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,kBACL,UACA,cACA,WACA,OACA,qBACsD;AACtD,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,OAAyB;AACvC,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,aACL,iBACA,iBACA,MAC0C;AAC1C,WAAO,KAAK,4BAA4B,iBAAiB,IAAI;AAAA,EAC9D;AAAA,EAEA,MAAM,eACL,kBACA,OACuB;AACvB,WAAO,IAAI,4BAAY,EAAE,IAAI,MAAM,MAAM,GAAG,GAAG,IAAI,EAAE;AAAA,EACtD;AAAA,EAEA,MAAM,kBACL,kBACA,OACA,OACgB;AAAA,EAAC;AAAA,EAEV,4BAA4B,iBAA0C,MAAc;AAC3F,UAAM,iBAAiB;AACvB,QAAI,mBAAmB,eAAe,KAAK,UAAU,eAAe,CAAC,GAAG;AACvE,aAAO,eAAe,KAAK,UAAU,eAAe,CAAC;AAAA,IACtD;AAEA,QAAI,QAAQ,eAAe,IAAI,GAAG;AACjC,aAAO,eAAe,IAAI;AAAA,IAC3B;AAEA,WAAO,CAAC;AAAA,EACT;AACD;AAhEa,oBAAN;AAAA,MADN,mBAAQ;AAAA,GACI;","names":[]}