import { z } from 'zod';
export declare const insightsSummaryTypeSchema: z.ZodEnum<["total", "failed", "failureRate", "timeSaved", "averageRunTime"]>;
export type InsightsSummaryType = z.infer<typeof insightsSummaryTypeSchema>;
export declare const insightsSummaryUnitSchema: z.ZodEnum<["count", "ratio", "time"]>;
export type InsightsSummaryUnit = z.infer<typeof insightsSummaryUnitSchema>;
export declare const insightsSummaryDataSchemas: {
    readonly total: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "count";
    }, {
        value: number;
        deviation: number | null;
        unit: "count";
    }>;
    readonly failed: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "count";
    }, {
        value: number;
        deviation: number | null;
        unit: "count";
    }>;
    readonly failureRate: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"ratio">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "ratio";
    }, {
        value: number;
        deviation: number | null;
        unit: "ratio";
    }>;
    readonly timeSaved: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "time";
    }, {
        value: number;
        deviation: number | null;
        unit: "time";
    }>;
    readonly averageRunTime: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "time";
    }, {
        value: number;
        deviation: number | null;
        unit: "time";
    }>;
};
export declare const insightsSummarySchema: z.ZodObject<{
    readonly total: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "count";
    }, {
        value: number;
        deviation: number | null;
        unit: "count";
    }>;
    readonly failed: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "count";
    }, {
        value: number;
        deviation: number | null;
        unit: "count";
    }>;
    readonly failureRate: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"ratio">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "ratio";
    }, {
        value: number;
        deviation: number | null;
        unit: "ratio";
    }>;
    readonly timeSaved: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "time";
    }, {
        value: number;
        deviation: number | null;
        unit: "time";
    }>;
    readonly averageRunTime: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodUnion<[z.ZodNull, z.ZodNumber]>;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number | null;
        unit: "time";
    }, {
        value: number;
        deviation: number | null;
        unit: "time";
    }>;
}, "strict", z.ZodTypeAny, {
    total: {
        value: number;
        deviation: number | null;
        unit: "count";
    };
    failed: {
        value: number;
        deviation: number | null;
        unit: "count";
    };
    failureRate: {
        value: number;
        deviation: number | null;
        unit: "ratio";
    };
    timeSaved: {
        value: number;
        deviation: number | null;
        unit: "time";
    };
    averageRunTime: {
        value: number;
        deviation: number | null;
        unit: "time";
    };
}, {
    total: {
        value: number;
        deviation: number | null;
        unit: "count";
    };
    failed: {
        value: number;
        deviation: number | null;
        unit: "count";
    };
    failureRate: {
        value: number;
        deviation: number | null;
        unit: "ratio";
    };
    timeSaved: {
        value: number;
        deviation: number | null;
        unit: "time";
    };
    averageRunTime: {
        value: number;
        deviation: number | null;
        unit: "time";
    };
}>;
export type InsightsSummary = z.infer<typeof insightsSummarySchema>;
export declare const insightsByWorkflowDataSchemas: {
    readonly count: z.ZodNumber;
    readonly data: z.ZodArray<z.ZodObject<{
        workflowId: z.ZodString;
        workflowName: z.ZodString;
        projectId: z.ZodString;
        projectName: z.ZodString;
        total: z.ZodNumber;
        succeeded: z.ZodNumber;
        failed: z.ZodNumber;
        failureRate: z.ZodNumber;
        runTime: z.ZodNumber;
        averageRunTime: z.ZodNumber;
        timeSaved: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }, {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }>, "many">;
};
export declare const insightsByWorkflowSchema: z.ZodObject<{
    readonly count: z.ZodNumber;
    readonly data: z.ZodArray<z.ZodObject<{
        workflowId: z.ZodString;
        workflowName: z.ZodString;
        projectId: z.ZodString;
        projectName: z.ZodString;
        total: z.ZodNumber;
        succeeded: z.ZodNumber;
        failed: z.ZodNumber;
        failureRate: z.ZodNumber;
        runTime: z.ZodNumber;
        averageRunTime: z.ZodNumber;
        timeSaved: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }, {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    data: {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }[];
    count: number;
}, {
    data: {
        projectId: string;
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        workflowId: string;
        workflowName: string;
        projectName: string;
        succeeded: number;
        runTime: number;
    }[];
    count: number;
}>;
export type InsightsByWorkflow = z.infer<typeof insightsByWorkflowSchema>;
export declare const insightsByTimeDataSchemas: {
    readonly date: z.ZodEffects<z.ZodString, string, string>;
    readonly values: z.ZodObject<{
        total: z.ZodNumber;
        succeeded: z.ZodNumber;
        failed: z.ZodNumber;
        failureRate: z.ZodNumber;
        averageRunTime: z.ZodNumber;
        timeSaved: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    }, {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    }>;
};
export declare const insightsByTimeSchema: z.ZodObject<{
    readonly date: z.ZodEffects<z.ZodString, string, string>;
    readonly values: z.ZodObject<{
        total: z.ZodNumber;
        succeeded: z.ZodNumber;
        failed: z.ZodNumber;
        failureRate: z.ZodNumber;
        averageRunTime: z.ZodNumber;
        timeSaved: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    }, {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    }>;
}, "strict", z.ZodTypeAny, {
    values: {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    };
    date: string;
}, {
    values: {
        total: number;
        failed: number;
        failureRate: number;
        timeSaved: number;
        averageRunTime: number;
        succeeded: number;
    };
    date: string;
}>;
export type InsightsByTime = z.infer<typeof insightsByTimeSchema>;
